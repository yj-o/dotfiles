#!/bin/bash
echo "--- Update bashrc ---"
# ------------------------------------------------------------------------------------ #
if [ -f "$HOME/.config/env" ]; then
    . "$HOME/.config/env"   # Use '.' instead of 'source' for POSIX compliance
    # echo "sourcing env"
fi


if [ ! -d "$HOME/.local/bin" ]; then
    mkdir -p $HOME/.local/bin
fi


# Define the target file.
BASHRC_FILE="$HOME/.bashrc"

# Define the snippet to add.
read -r -d '' BASHRC_SNIPPET << 'EOF'
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

if [ -f ~/.config/bash/bashrc ]; then
    source ~/.config/bash/bashrc
fi
EOF

# If .bashrc exists, prompt the user whether to delete it.
if [ -f "$BASHRC_FILE" ]; then
    echo ".bashrc already exists."
    read -r -p "Do you want to delete the existing .bashrc? (y/N) " response
    case "$response" in
        [yY][eE][sS]|[yY])
            rm -f "$BASHRC_FILE"
            echo "Deleted the existing .bashrc."
            ;;
        *)
            echo "Keeping the existing .bashrc."
            ;;
    esac
fi

# Make sure .bashrc exists (create an empty one if needed).
if [ ! -f "$BASHRC_FILE" ]; then
    touch "$BASHRC_FILE"
    # echo "Created a new .bashrc file."
fi

# Append the snippet only if it isn't already present.
if ! grep -q "If not running interactively" "$BASHRC_FILE"; then
    echo "$BASHRC_SNIPPET" >> "$BASHRC_FILE"
    # echo "Appended the bashrc snippet."
else
    echo "bashrc snippet already present; nothing to do."
fi

source ~/.bashrc

# ------------------------------------------------------------------------------------ #
# if is Debian-based
echo "--- Installing packages ---"
if command -v apt >/dev/null 2>&1; then
    sudo apt update -y
    sudo apt upgrade -y
    sudo apt install gpg -y
    sudo apt install gnupg -y
    sudo apt install git -y
    sudo apt install curl -y
    sudo apt install net-tools -y
    sudo apt install tmux -y
    sudo apt install tio -y
    sudo apt install vim -y
    sudo apt install wget -y
    sudo apt install fd-find -y


    # Install fzf
    if ! command -v fzf >/dev/null 2>&1; then
        curl -fLo $HOME/fzf_install https://raw.githubusercontent.com/junegunn/fzf/master/install && chmod a+x $HOME/fzf_install
        ./fzf_install --xdg --no-update-rc --key-bindings --completion --no-zsh
        mv ~/bin/fzf $XDG_BIN
        rm -rf ~/bin
        rm ~/fzf_install
        curl -fLo ~/.local/bin/fzf-tmux --create-dirs https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux
        chmod +x ~/.local/bin/fzf-tmux
    fi

    # Install eza
    if ! command -v eza >/dev/null 2>&1;  then
        sudo mkdir -p /etc/apt/keyrings
        wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
        echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
        sudo chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
        sudo apt update
        sudo apt install -y eza
    fi

    # Install zoxide
    if ! command -v zoxide >/dev/null 2>&1;  then
        curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
    fi

    # Install pipx
    if ! command -v pixi >/dev/null 2>&1; then
        curl -fsSL https://pixi.sh/install.sh | PIXI_NO_PATH_UPDATE=1 bash
    fi

fi

# ------------------------------------------------------------------------------------ #
# # Source myzsh from ~/.zshrc
# if [ ! -d "$HOME/.oh-my-zsh" ]; then
#   git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
#   if ! grep -Fxq 'source "$HOME/.myzsh"' ~/.zshrc; then
#     echo 'source "$HOME/.myzsh"' >> ~/.zshrc
#   fi
#   git clone https://github.com/conda-incubator/conda-zsh-completion $HOME/.config/zsh/plugins/conda-zsh-completion
#   git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git $HOME/.config/zsh/plugins/fast-syntax-highlighting
#   git clone https://github.com/zsh-users/zsh-autosuggestions $HOME/.config/zsh/plugins/zsh-autosuggestions
# #   git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting
# #   git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
# #   git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git $ZSH_CUSTOM/plugins/zsh-autocomplete
# fi




# ------------------------------------------------------------------------------------ #
# update yadm repo origin URL to use SSH
if [ ! -f "$HOME/.ssh/gh.key" ]; then
    echo "Updating the yadm repo origin URL"
    yadm remote set-url origin "git@github.com:yj-o/dotfiles.git"

    echo "Adding SSH key for GitHub"
    export GPG_TTY=$(tty)
    yadm decrypt
    eval "$(ssh-agent -s)"
    ssh-add "$HOME/.ssh/gh.key"
else
    echo "SSH key already exists. Skipping setup."
fi


# ------------------------------------------------------------------------------------ #
# tpm for tmux
if [ ! -d "$HOME/.config/tmux/plugins" ]; then
    mkdir -p $HOME/.config/tmux/plugins
    git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm
    ~/.config/tmux/plugins/tpm/bin/install_plugins
fi

# ------------------------------------------------------------------------------------ #
# # vim-plug for vim
# if [ ! -d "$HOME/.vim/bundle" ]; then
#     mkdir -p $HOME/.vim/bundle
#     git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
#     vim +PluginInstall +qall
# fi


# ------------------------------------------------------------------------------------ #
# Install git-extras
# curl -sSL https://raw.githubusercontent.com/tj/git-extras/main/install.sh | sudo bash /dev/stdin